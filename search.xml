<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[你不知道的Intellij-IDEA]]></title>
      <url>%2F2017%2F04%2F01%2F%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Intellij-IDEA%2F</url>
      <content type="text"><![CDATA[前沿： 工作开始就一直使用Intellij IDEA,从最初的10.0到现在的2017.1，Intellij IDEA陪我走过了五年时光，关于这款IDEA的小技巧，今天给大家科普一下。 正文： 说明：本文是基于windows下Intellij IDEA-2016.3来编写的（2017.1我也是刚更新的）。如果看客使用的是其他版本或者快捷键，请各位自行脑补成你对应的快捷键。 关闭Intellij IDEA的Tab页： 为嘛要关闭Tab页呢，Tab页放在那里，当我们每次需要找文件的时候，都要去Tab页瞄一眼，这个瞄一眼，如果Tab页少的话还好说，Tab页多的话直接是眼睛看花的节奏，好吧就算Tab页比较少，你找到了，用鼠标点一下。这种操作效率极其低下，更加快捷的方式是直接关掉Tab页的功能: 然后用Ctrl + E来找到最近访问的文件， 或者直接用Ctrl + Shift + E 来访问最近编辑的文件，其实如果你记得文件名的话，用Ctrl + Shift + N 输入文件名是万金油的方法。 跳到特定的文件夹： Intellij IDEA 和 Eclipse都有快速根据类名寻找类，或者根据资源名寻找资源的方式，但是我们想找一个文件夹，在Intellij IDEA里面，可以输入/文件夹名(使用Double Shift快捷键)，截图如下： 快速补全行末分号： Java中，每一个statement后面都要加上 ; 号，我们可以在行中任意位置使用快捷键 Ctrl + Shift + Enter 来快速补全分号： Hippie Completion： 这种自动补全的模式，会选择当前编辑器中适合的单词直接拿过来补全： 粘贴版历史： 在实际开发过程中，是不是会经常碰到这样的事情，2个页面的code需要互相替换一下，这时候一定在想粘贴板要是有历史功能就好了。其实 Intellij IDEA 里面也提供了这样的能力，我们可以直接通过 Ctrl + Shift + V 来进行访问历史粘贴板： Language Injection： 大家都知道在 Java 的 String 中编辑有 JSON 的话有多麻烦，各种转义真是让人疯狂，在 Intellij IDEA 中，我们可以直接使用 Intellij IDEA 的 Language Injection 的功能（Alt + Enter）将一个字符串标记为 JSON，就可以非常方便地编写 JSON 了，再也不用担心转义的问题了： 当然，正则表达式也是支持的，甚至支持简单的正则表达式的测试能力： 结束语： 以上就是这次为大家分享的一些Intellij IDEA的使用小技巧，当然还有很多的小技巧等待你的发觉，还在犹豫是否加入Intellij IDEA 大家庭的伙伴们，赶紧到碗里来吧！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java 8 十大特性]]></title>
      <url>%2F2017%2F03%2F31%2FJava%208%E5%8D%81%E5%A4%A7%E7%89%B9%E6%80%A7%2F</url>
      <content type="text"><![CDATA[前沿： Java 9已发布一段时间了，Oracle在Java 9里又添加了一些新特性，Java 8已经发布3年之久了，你对Java 8的十大特性又了解多少呢？ 正文： Orale说了Java 8是自Java 5以来最具革命性的版本，她在语言、编辑器、类库、开发工具以及Java虚拟机等方面都带来了不少新特性。我来一一回顾这些特性 一、Lambda表达式 Lambda表达式可以说是Java 8最大的卖点，她讲函数式编程引入了Java。Lambda允许把函数作为一个方法的参数，或者把代码看错数据。 一个Lamdba表达式可以由都好分隔参数列表。-&gt;符号和函数体三部分表示。例如：1Arrays.asList( "p", "k", "u","f", "o", "r","k").forEach( e -&gt; System.out.println( e ) ); 上面的示例在Java 7中有forEach是这样写的：123for (String e : Arrays.asList("p", "k", "u", "f", "o", "r", "k")) &#123; System.out.println(e); &#125; 为了使现有的函数更好的支持Lamdba表达式，Java 8引入函数式接口的概念。函数式接口就是只有一个方法的普通接口。java.lang.Runnable与java.util.concurrent.Callable是函数式接口最典型的例子。为此，Java 8增加了一种特殊的注解@FunctionalInterface：1234@FunctionalInterfacepublic interface Functional &#123; void method();&#125; 二、接口的默认方法与静态方法 我们可以在接口中定义默认方法，使用default关键字，并提供默认的实现，所有实现这个接口的类都会接受默认方法的实现，除非子类提供了自己的实现。例如：12345public interface DefaultFunctionInterface &#123; default String defaultFunction() &#123; return "default function"; &#125;&#125; 我们还可以在接口中定义静态方法，使用static关键字，也可以提供实现。例如：12345public interface StaticFunctionInterface &#123; static String staticFunction() &#123; return "static function"; &#125;&#125; 三、方法引用 通常与Lambda表达式联合使用，可以直接引用已有Java类或对象的方法。一般有四种不同的方法引用： 构造器引用。语法是Class::new，或者更一般的Class&lt; T &gt;::new，要求构造器方法是没有参数； 静态方法引用。语法是Class::static_method，要求接受一个Class类型的参数； 特定类的任意对象方法引用。它的语法是Class::method。要求方法是没有参数的； 特定对象的方法引用，它的语法是instance::method。要求方法接受一个参数，与3不同的地方在于，3是在列表元素上分别调用方法，而4是在某个对象上调用方法，将列表元素作为参数传入 四、重复注解 在Java 5中使用注解有一个限制，即相同的注解在同一位置只能声明一次。Java 8引入重复注解，这样相同的注解在同一地方也可以声明多次。重复注解机制本身需要用@Repeatable注解。Java 8在编译器层做了优化，相同注解会以集合的方式保存，因此底层的原理并没有变化。 五、扩展注解的支持 Java 8扩展了注解的上下文，几乎可以为任何东西添加注解，包括局部变量、泛型类、父类与接口的实现，连方法的异常也能添加注解。 六、Optional Java 8引入Optional类来防止空指针异常，Optional类最先是由Google的Guava项目引入的。Optional类实际上是个容器：它可以保存类型T的值，或者保存null。使用Optional类我们就不用显式进行空指针检查了。 七、Stream Stream API是把真正的函数式编程风格引入到Java中。其实简单来说可以把Stream理解为MapReduce，当然Google的MapReduce的灵感也是来自函数式编程。她其实是一连串支持连续、并行聚集操作的元素。从语法上看，也很像linux的管道、或者链式编程，代码写起来简洁明了，非常酷帅！ 八、Date/Time API (JSR 310) Java 8新的Date-Time API (JSR 310)受Joda-Time的影响，提供了新的java.time包，可以用来替代 java.util.Date和java.util.Calendar。一般会用到Clock、LocaleDate、LocalTime、LocaleDateTime、ZonedDateTime、Duration这些类，对于时间日期的改进还是非常不错的。 九、JavaScript引擎Nashorn Nashorn允许在JVM上开发运行JavaScript应用，允许Java与JavaScript相互调用。 十、Base64 在Java 8中，Base64编码成为了Java类库的标准。Base64类同时还提供了对URL、MIME友好的编码器与解码器。 除了这十大新特性之外，还有另外的一些新特性： 更好的类型推测机制：Java 8在类型推测方面有了很大的提高，这就使代码更整洁，不需要太多的强制类型转换了。 编译器优化：Java 8将方法的参数名加入了字节码中，这样在运行时通过反射就能获取到参数名，只需要在编译时使用-parameters参数。 并行（parallel）数组：支持对数组进行并行处理，主要是parallelSort()方法，它可以在多核机器上极大提高数组排序的速度。 并发（Concurrency）：在新增Stream机制与Lambda的基础之上，加入了一些新方法来支持聚集操作。 Nashorn引擎jjs：基于Nashorn引擎的命令行工具。它接受一些JavaScript源代码为参数，并且执行这些源代码。 类依赖分析器jdeps：可以显示Java类的包级别或类级别的依赖。 JVM的PermGen空间被移除：取代它的是Metaspace（JEP 122）。 结束语： Java 8是一次变化巨大的更新，耗费了工程师大量的时间，还借鉴了很多其它语言和类库。在这里就不一一详细列举了，有时间会在后面的文章给大家详细解读一下。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>%2F2017%2F03%2F29%2Fhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[前沿： 近期空闲时间较多，在搭建微信公众号时，多多少少遇到了一些问题，以前喜欢将问题记录到印象笔记里，但是笔记格式不好调整。最近看到 一些大神们的博客，貌似都是用hexo搭建的，版式还很漂亮，我也依葫芦画瓢的搭建了一个。 正文： 经过各种网上找资料，终于使用hexo把个人博客搭建成功了，目前域名使用的还是GitHub的，我的hexo版本是3.2.2，hexo版本不同，配置是不一样的，但是参考hexo官方文档，基本都是大同小异的。好了，话不多说，进入正题。 环境准备安装Node 作用：node.js用来创建hexo博客框架，生成静态页面。 安装Git 作用：把本地的hexo内容提交到github上去。 申请GitHub 作用：用来做博客的远程仓库、域名、服务器。github账号直接在官网申请就可以了，SSH Keys配置什么的这篇文章就不写了，我本地之前已经配置好了，后面如果有时间会出专门的一个章节来描述怎么配置，当然网上教程一大堆，也可以直接参考别人的。 安装Hexo hexo直接用npm命令安装就可以了。直接在git bash或cmd下输入全局安装(－ｇ)命令:1npm install -g hexo 安装完成后，在你需要建立hexo的地方建立一个工作文件夹，我的是在e盘建立hexo文件夹，在hexo文件夹内执行以下命令(命令行都是在git bash或者cmd下执行的后面所有说的命令都是在这里执行的)，Hexo即会自动在目标文件夹建立网站所需要的所有文件。1hexo init 上面的命令也可以在任意文件夹用此命令代替，1hexo init E:\hexo 初始化文件夹后ｃｄ到文件夹目录，安装依赖包，执行以下命令，1npm install 这里先说明一下hexo几个常用命令到底是几个意思？1234hexo g #完整命令为hexo generate，用于生成静态文件hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览hexo d #完整命令为hexo deploy，用于将本地文件发布到github上(当然可发布到其他地方)hexo n #完整命令为hexo new，用于新建一篇文章 让我们看看刚刚的那些小代码给我们带来了什么惊喜，在E:\hexo内执行以下命令：12hexo g hexo s 用浏览器访问http://localhost:4000，此时，您应该看到了一个漂亮的博客了，博客里默认给你添加了一篇程序猿专用的文章Hello World，当然这个博客只存在你的本地，别人是无法看到的，hexo3使用的默认主题是landscape。轻轻松松就看到了效果，是不是很激动，这就是hexo的强大之处，接下来讲告诉你怎么把你的博客部署到GitHub上，可以让别人也看到你写的博客。 GitHub创建Repository repository相当于一个仓库，用来放置你的代码的。首先登陆GitHub，并在个人页面选择repositories，然后New一个repository。创建时，只需要填写Repository name即可，当然这个名字可不是乱写的，名字的格式必须为youname.github.io,例如我的github地址是https://github.com/ruiger,我的名字就为ruiger.github.io 部署本地文件到github 既然Repository已经创建了，现在就把博客放到GitHub看看效果。编辑hexo文件夹下的_config.yml，建议用文本编辑器打开(如Notepad++，这个软件是免费的，感谢开源！)。在_config.yml的最下方，添加如下代码(注意hexo命令:后要跟一个空格)，配置完成并保存。1234deploy: type: git repository: https://github.com/ruiger/ruiger.github.io branch： master 第一次使用github可能需要配置SSH，这里不赘述了网上有很多教程。配置完github后在hexo执行如下命令：12hexo ghexo d 如果执行hexo d命令报错:ERROR Deployer not found：git需要安装hexo-deployer-git这个模块1npm install hexo-deployer-git --save 安装好了继续执行hexo d部署命令，在浏览器输入你的地址，我的为ruiger.github.io。 发表一篇文章 在Git Bash执行命令 1hexo new "my new post" 在hexo文件夹下的source_post中打开my-new-post.md，打开方式使用记事本或者其它文本工具，当然最好是使用makedown专用的工具，这里推荐markdownpad这个工具。Markdown编写语法自己google一下，不难，很容易就学到手了。 123456title: my new post #可以改成中文的，如“新文章”date: 2016-02-21 16:04:09 #发表日期，一般不改动categories: blog #文章文类tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog--这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more 才能看到。 写完文章后，你可以使用1.$ hexo g生成静态文件。2.$ hexo s在本地预览效果。3.hexo d同步到github(hexo g；hexo d 两个命令可以合并成一个hexo d -g)，然后使用http://youname.github.io 进行访问。 结束语 好了，到此你的hexo个人博客应该已经搭建好了，如果你对hexo默认的主题不感冒，可以切换其它更加好看的主题哦。博主现在用的Next.Mist主题,主题如何切换配置可以查看Next使用文档]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F29%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
